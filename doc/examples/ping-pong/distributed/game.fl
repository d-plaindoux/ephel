use player

--{
    Solution 1:

    @ping and @pong should exist (i.e. active agents)
    and are denoted by an ambient with the same name.

    Open problem:
        Some resources are already provisioned (How?)

    Once @ping is "incarnated" its content is:
    ```
    @game[ ping[] || @pong || @printer ]
    ```
}--

val _ : ambient process =
    `game[
        @`ping                                   ||
        @`pong                                   ||
        `printer[ (x:ambient name).(println x) ] ||
        go in `ping.<Nat , 42>                   ||
        --{ Additional process for players }--
        go (in `ping).(player `ping to `pong)    ||
        go (in `pong).(player `pong to `p1ng)    ||
    ]

============================================================

--{
    Solution 2:

    Spawn is a system operation for ambient incarnation. This
    solution uses the first one. It enables the capacity to
    dispatch process incarnation.

    ```
    val spawn : ambient name -> (() -> ambient process) -> ambient process
    val spawn = name f =>
        @name || go (in name).(f ())
    ```

}--

val _ : ambient process =
    `game[
        (spawn `ping $ () => player `ping to `pong) ||
        (spawn `pong $ () => player `pong to `ping) ||
        `printer[ (x:ambient name).(println x) ]    ||
        go in `ping.<Nat , 42>
    ]
