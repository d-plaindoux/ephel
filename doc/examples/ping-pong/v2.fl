val ping : type = Ping : nat -> ping
val ping_to_nat : ping -> nat = Ping n => n

val pong : type = Pong : nat -> pong
val pong_to_nat : pong -> nat = Pong n => n

sig play : {A:type} -> string -> (nat -> A) -> (A -> nat) -> nat -> ambient process
val play = {A} who to_a from_a =>
    | Zero   => <String , who>
    | Succ n => <x:A>.(play who fa from_a $ from_a a) || <A , to_a n>

 val _ : ambient process =
    <n:pong>.(play "Bob"   Ping pong_to_nat $ pong_to_nat n) ||
    <n:ping>.(play "Alice" Pong ping_to_nat $ ping_to_nat n) ||
    <x:string>.(println x)                                   ||
    <pong , Pong 42>
