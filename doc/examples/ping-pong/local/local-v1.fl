sig play : ambient name -> ambient name -> Nat -> ambient process
val play = sender receiver =>
    | Zero   => go (out sender.in `printer).<ambient name , sender>
    | Succ n => <x:Nat>.(play sender receiver x) | go (out sender.in receiver).<n> in

sig to : @infix (ambient name -> ambient process) -> ambient name -> ambient process
sig to = f p => f p

sig player : ambient name -> ambient name -> ambient process
val player = sender receiver =>
    sender[ <x:Nat>.(play sender receiver x) ]

 val _ : ambient process =
    (player `ping to `pong)                  |
    (player `pong to `ping)                  |
    `printer[ (x:ambient name).(println x) ] |
    go in `ping.<42>
