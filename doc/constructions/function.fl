-- Parametric functional type

sig Identity : {X:type} -> X -> X
val Identity = x => x

-- Infix capability / Only applied to explicit parameters

sig _compose_ : {A B C:type} -> (B -> C) -> (A -> B) -> (A -> C)
val _compose_ = f g => x => f (g x)

sig _|>_ : {A B C:type} -> (A -> B) -> (B -> C) -> (A -> C)
val _|>_ = f g => g compose f

val main : Int =
    let increment : Int -> Int = add 1 in
    let toString  : Int -> String = i => i toString in
    -{ increment (|> {Int String String}) toString 2 }-
    increment |> toString 2
