-- Ambient calculus as first class citizen

```ebnf
M := `id
C :=
    M
    in M
    out M
    open M
    C.C
P :=
    ()
    P || P
    M[ P ]
    go (C).P
    <e,e>
    <e:e>.e
```

val name : ambient name =
    `test

val zero : ambient process =
    ()

val parallel : ambient process -> ambient process -> ambient process
    = p1 p2 => p1 || p2

val in_cap : ambient name -> ambient process -> ambient process
    = name p => in name.p

val out_cap : ambient name -> ambient process -> ambient process
    = name p => out name.p

val open_cap : ambient name -> ambient process -> ambient process
    = name p => open name.p
