val Monoid : type -> type = T =>
    sig struct
        sig neutral : T
        sig _combine_ : T -> T -> T
    end

val MonoidInt : Monoid Int =
    let open Int in
    val struct
        val neutral = 0
        val _combine_ = _+_
    end

val MonoidString : Monoid String =
    let open String in
    val struct
        val neutral = ""
        val _combine_ = _^_
    end

val main1 : Int =
    let open MonoidInt in
    1 combine neutral

val main2 : Int =
    1 (MonoidInt.combine) (MonoidInt.neutral)

-- Note: Each source file is a module

-- Module type and combination capability

val mf : sig struct f : int -> int end =
    val struct
        val f = i => i
    end

val mg : sig struct g : int -> int end =
    val struct
        val g = i => i
    end

val mfg : sig struct
        open sig of mf
        open sig of mg
    end =
    val struct
        open mf
        open mg
    end
