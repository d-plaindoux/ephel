sig Traverse : (type -> type) -> (type -> type) -> type
val Traverse = T F =>
    sig struct
        sig traverse : {A B:type} -> (A -> F B) -> T A -> F (T B)
    end

sig Sequence : (type -> type) -> (type -> type) -> type
val Sequence = T F =>
    sig struct
        sig sequence : {A:type} -> T (F A) -> F (T A)
    end

sig Traversable : (type -> type) -> (type -> type) -> type
val Api = T F =>
    sig struct
        open Traverse T F
        open Sequence T F
    end

sig Api =: sig of Traversable = Traversable

-{ Work in progress }-

sig With-Applicative: (T:type -> type) -> (F:type -> type) -> category.applicative.Api F -> Api T F
val With-Applicative = T F applicative =>
    let open std.core in
    let open applicative in
    val struct
        val traverse = f => map f |> sequence
        val sequence = traverse id
    end

sig With-Monad: (T:type -> type) -> (F:type -> type) -> category.monad.Api F -> Api T F
val With-Monad = T F monad =>
    let open std.core in
    let open monad in
    val struct
        val traverse = bind
        val sequence = traverse id
    end

