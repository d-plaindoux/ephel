sig Api : (_~>_ : type -> type -> type) -> type
val Api = _~>_ =>
    let open std.core in
    sig struct
        sig dimap : {A B C D:type} -> (A -> B) -> (C -> D) -> B ~> C -> A ~> D

        sig lmap : {A B C:type} -> (A -> B) -> B ~> C -> A ~> C -- aka contramap_fst
        val lmap = f => dimap f id

        sig rmap : {A B C:type} -> (B -> C) -> A ~> B -> A ~> C -- aka map_snd
        val rmap = dimap id

        sig Laws =
            sig struct
            sig ''dimap id id = id'' :
                {B C:type }
                -> (f: B ~> C)
                ----------------------
                dimap id id f :=: id f

            sig ''lmap id = id'' :
                lmap id :=: id

            sig ''rmap id = id'' :
                rmap id :=: id

            sig ''dimap f g = lmap f <| rmap g'' :
                {A B C D:type}
                -> {f:A -> B} -> {g:C -> D}
                -> dimap f g :=: lmap f <| rmap g

            sig ''dimap (f <| g) (h <| i) = dimap g h <| dimap f i'' :
                {A B C D E F:type}
                -> {f:B -> C} -> {g:A -> B}
                -> {h:E -> F} -> {i:D -> E}
                -> dimap (f <| g) (h <| i) :=: dimap g h <| dimap f i

            sig ''lmap (f <| g) = lmap g <| lmap f'' :
                {A B C:type}
                -> {f:B -> C} -> {g:A -> B}
                -> lmap (f <| g) :=: lmap g <| lmap f

            sig ''rmap (f <| g) = rmap f <| rmap g'' :
                {A B C:type}
                -> {f:B -> C} -> {g:A -> B}
                -> rmap (f <| g) :=: rmap f <| rmap g
        end
    end