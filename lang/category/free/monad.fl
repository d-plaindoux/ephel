sig Free : (type -> type) -> type -> type
val Free = T A =>
    | Return : A -> Free T A
    | Bind : T (Free T A) -> Free T A

sig Map : (T:type -> type) -> Functor T -> Monad (Free T)
val Map : T F =>
    val struct
        open Functor (Free T)

        sig map = f =>
            | Return v => Return (f v)
            | Bind f' => Bind (F.map (map f) f')
    end
