sig Join : (type -> type) -> type
val Join = F =>
    sig struct
        sig join : {A:type} -> F (F A) -> F A
    end

sig Return : (type -> type) -> type
val Return = F =>
    sig struct
        open applicative.Pure F
        val return : sig of pure = pure
    end

sig Bind : (type -> type) -> type = F =>
val Bind = F =>
    sig struct
        sig bind : {A B:type} -> A -> (A -> F B) -> F B
        val _>>=_ : sig of bind = bind
    end

sig Monad : (type -> type) -> type
val Monad = F =>
    sig struct
        open applicative.Applicative F

        open Join F
        open Return F
        open Bind F

        val bind = a f => join (f <$> a)
    end

-- Laws are missing here