sig Return : (type -> type) -> type
val Return = F =>
    sig struct
        open applicative.Pure F
        val return : sig of pure = pure
    end

sig Bind : (type -> type) -> type = F =>
val Bind = F =>
    sig struct
        sig bind : {A B:type} -> A -> (A -> F B) -> F B
        val _>>=_ : sig of bind = bind
    end

sig Join : (type -> type) -> type
val Join = F =>
    sig struct
        sig join : {A:type} -> F (F A) -> F A
    end

sig Api : (type -> type) -> type
val Api = F =>
    sig struct
        open category.applicative.Api F

        open Return F
        open Bind F
        open Join F

        val bind = a f =>
            let open std.core in
            f <$> a |> join

        sig Laws =
            sig struct
                -- Laws are missing here
            end
    end