sig Map : (type -> type) -> type
val Map = F =>
    sig struct
        sig map : {A B:type} -> (A -> B) -> F A -> F B
        val _<$>_ : sig of map = map
    end

sig Api : (type -> type) -> type
val Api = F =>
    let open std.core in
    sig struct
        open Map F

        sig Laws :
            sig struct
                sig ''map id = id'' :
                    {A:type}
                    -> (a:F A)
                    --------------------
                    -> map id a :=: a

                sig ''(map f) <| (map g) = map (f <| g)'' :
                    {A B C:type}
                    -> {f:B -> C} -> {g:A -> B}
                    -> (a:F A)
                    -------------------------------------
                    -> (map f <| map g) a :=: map (f <| g) a
            end
    end
