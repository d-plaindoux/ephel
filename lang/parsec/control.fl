-{ Prelude }-

open std.core
open std.bool
open parsec.parser
open dsl.begin-end
open dsl.-match-

-{ Functor, Applicative and Monad }-

sig Functor : category.functor.Api Parser.t
val Functor = val struct
    val map = f p => s =>
        p s match
        | Success e c s => Success (f e) c s
        | Failure r c s => Failure r c s

    val Laws-Functor = val struct
        val ''map id = id'' = p => s =>
            p s match
            | Success _ _ _ => ??
            | Failure _ _ _ => ??

        val ''map f <| map g = map (f <| g)'' = p => s =>
            p s match
            | Success _ _ _ => ??
            | Failure _ _ _ => ??
    end
end

sig Applicative : category.applicative.Api Parser.t
val Applicative = val struct
    open Functor

    val pure = some

    -{ Order is important here :/ }-
    val product = ca cb => s =>
        ca s match
        | Success a ca s =>
            begin cb s match
            | Success b cb s => Success (a,b) (ca && cb) s
            | Failure r cb s => Failure r (ca && cb) s
            end
        | Failure r c s => Failure r c s

    val Laws-Applicative = val struct end
end

sig Monad : category.monad.Api Parser.t
val Monad = val struct
    open Applicative

    val join = p => s =>
        p s match
        | Success a _ _ => a
        | Failure r c s => Failure r c s

    val Laws-Monad = val struct end
end