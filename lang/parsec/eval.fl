open std.unit
open std.option
open dsl.-if-then-else-
open dsl.begin-end
open parsec.result
open parsec.parser

sig Eval : (P:Parser) ->
    sig struct
        sig eos : P Unit
        sig return : {A:type} -> A -> (P A)
        sig fails : {A:type} -> String? -> P A
        sig satisfy : {A:type} -> P A -> (predicate:A -> Bool) -> P A
        sig try : {A:type} -> P A -> P A
    end

val Eval = P =>
    val struct
        val eos =
            | source, value =>                                      -- unpack
                begin source.next value match
                | Some e, s => Failure none false (source,value)    -- pack
                | None, s => Success unit false (source,value)      -- pack
                end

        val return = result => Success result false -- Source is implicit / Point free

        val fails = reason => Failure reason false -- Source is implicit / Point free

        val satisfy = parser predicate => source =>
            fold (parser source)
                (element consumed source =>
                    if predicate element
                    then (_ => Success element consumed source)
                    else (_ => Failure none false source)
                )
                Failure

        val try = parser => source =>
            fold (parser source)
                Success
                (reason _ source => Failure reason false source)
    end

