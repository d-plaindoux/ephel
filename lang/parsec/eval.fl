open std.unit
open std.option
open dsl.-if-then-else-
open dsl.begin-end
open parsec.result
open parsec.parser

sig Eval : (P:Parser) -> sig struct
    sig eos : P Unit
    sig return : {A:type} -> A -> P.t A
    sig fails : {A:type} -> String? -> P.t A
    sig satisfy : {A:type} -> P.t A -> (predicate:A -> Bool) -> P.t A
    sig lazy : {A:type} -> (Unit -> P.t A) -> P.t A
    sig try : {A:type} -> P.t A -> P.t A
    sig lookahead : {A:type} -> P.t A -> P.t A
    sig fix : {A:type} -> (P.t A -> P.t A) -> P.t A

    sig Infix : sig struct
        sig _<?>_ : sig of satisfy (infix 1000)
        val _<?>_ = satisfy
    end
end

val Eval = P => val struct
    val eos = source =>
        begin P.Source.next source match
        | Some e, s => Failure none false source
        | None, s => Success unit false source
        end

    val return = result => Success result false

    val fails = reason => Failure reason false

    val satisfy = parser predicate => source =>
        fold (parser source)
            (element consumed source =>
                if predicate element
                then (_ => Success element consumed source)
                else (_ => Failure none false source)
            )
            Failure

    val lazy = parser => source => parser unit source

    val try = parser => source =>
        fold (parser source)
            Success
            (reason _ source => Failure reason false source)

   val lookahead = parser => source =>
        fold (parser source)
            (element _ _ => Success element false source)
            (reason _ _ => Failure reason false source)

   val fix = f => source => f (fix f) source
end

