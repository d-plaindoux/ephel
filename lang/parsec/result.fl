open std.bool
open std.option

sig Result : sig struct
    sig t : (element:type) -> (source:type) -> type
    sig fold : {E S B:type}
            -> (result:t E S)
            -> (onSuccess:E -> Bool -> S -> B)
            -> (onFailure:String? -> Bool -> S -> B)
            -> B
end

val Result = val struct
    val t = E S =>
        | Success : (element:E) -> (consumed:Bool) -> (source:S) -> Result E S
        | Failure : (reason:String?) -> (consumed:Bool) -> (source:S) -> Result E S

    val fold =
        | Success e c s => onSuccess _ => onSuccess e c s
        | Failure r c s => _ onFailure => onFailure r c s
end