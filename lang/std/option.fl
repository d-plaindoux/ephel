-{ Prelude }-

open std.core

-{ Type definition }-

sig _? : type -> type (infix 200)
val _? = A =>
    | None : A?
    | Some : A -> A?

-{ Constructors }-

val none : {A:type} -> A? = None
val some : {A:type} -> A -> A? = Some

-{ Catamorphism }-

sig fold : {A R:type} -> A? -> (unit -> R) -> (A -> R) -> A
val fold =
    | None   => l => _ => l unit
    | Some a => _ => r => r a

val _?_:_ : sig of fold = fold (infix 150)

-{ Functor, Applicative and Monad }-

val Functor : category.functor.Api _? =
    val struct
        val map = f =>
            | None   => None
            | Some a => Some $ f a

        val Laws =
            val struct
                val ''map id = id'' =
                    | None   => refl
                    | Some _ => refl

                val ''map f <| map g = map (f <| g)'' =
                    | None   => refl
                    | Some _ => refl
            end
    end

val Applicative : category.applicative.Api _? =
    val struct
        open Functor

        val pure = some
        val product =
            | None   => _ => None
            | Some f =>
                | None   => None
                | Some a => Some (f,a)

        val Laws = val struct end
    end

val Monad : category.monad.Api _? =
    val struct
        open Applicative

        val join =
            | None   => None
            | Some a => a

        val Laws = val struct end
   end
