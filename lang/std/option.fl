sig _? : type -> type (infix 200)
val _? = A =>
    | None : A?
    | Some : A -> A?

val none : {A:type} -> A? = None
val some : {A:type} -> A -> A? = Some

val Functor : category.functor.Functor _? =
    val struct
        val map = f =>
            | None => None
            | Some a => Some $ f a

        val Laws =
            val struct
                val ''map id = id'' =
                    | None   => refl
                    | Some _ => refl

                val ''(map f) <| (map g) = map (f <| g)'' =
                    | None   => refl
                    | Some _ => refl
            end
    end

val Applicative : category.applicative.Applicative _? =
    val struct
        open Functor

        val pure = some
        val product =
            | None   => _ => None
            | Some f =>
                | None   => None
                | Some a => Some (f,a)
    end

val Monad : category.monad.Monad _? =
    val struct
        open Applicative

        val join =
            | None   => None
            | Some a => a
   end
