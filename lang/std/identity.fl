-{ Type definition }-

sig Id : type -> type
val Id = e => e

-{ Functor, Applicative and Monad }-

sig Functor : category.functor.Api Id
val Functor = val struct
    val map = a f => f a

    val Laws-Functor = val struct
        val ''map id = id'' =
            refl

        val ''(map f) <| (map g) = map (f <| g)'' =
            refl
    end
end

sig Applicative : category.applicative.Api Id
val Applicative = val struct
    open Functor

    val pure = std.core.id
    val product = f a => (f,a)

    val Laws-Applicative = val struct end
end

sig Monad : category.monad.Api Id
val Monad = val struct
    open Applicative

    val join = std.core.id

    val Laws-Monad = val struct end
end

