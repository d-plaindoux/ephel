-{ Type definition }-

sig Id : type -> type
val Id = e => e

-{ Functor, Applicative and Monad }-

val Functor : category.functor.Api Id =
    val struct
        val map = a f => f a

        val Laws =
            val struct
                val ''map id = id'' =
                    refl

                val ''(map f) <| (map g) = map (f <| g)'' =
                    refl
            end
    end

val Applicative : category.applicative.Api Id =
    val struct
        open Functor

        val pure = std.core.id
        val product = f a => (f,a)

        val Laws = val struct end
    end

val Monad : category.monad.Api Id =
    val struct
        open Applicative

        val join = std.core.id

        val Laws = val struct end
   end

