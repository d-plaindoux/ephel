sig Nat : type
val Nat =
    | Zero
    | Succ : Nat -> Nat

sig Monoid : algebra.monoid.Api
val Monoid =
    val struct
        val neutral = Zero
        val combine =
            | Zero => std.core.id
            | Succ a => b => Succ (combine a b)

        val Laws =
            val struct
                val ''a = neutral + a'' =
                    refl

                val ''a = a + neutral'' =
                    | Zero    => refl
                    | Succ a' => subst refl by (''a = a + neutral'' a')

                val ''(a + b) + c = a + (b + c)'' = a b c =>
                    a match
                    | Zero    => refl
                    | Succ a' => congruent Succ (''(a + b) + c = a + (b + c)'' a' b c)
            end
    end