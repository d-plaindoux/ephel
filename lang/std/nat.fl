sig Nat : type
val Nat =
    | Zero
    | Succ : Nat -> Nat

sig Equals : std.equals.Api Nat
val Equals =
    let open std.bool in
    val struct
        val _==_ =
            | Zero =>
                begin
                | Zero => true
                | Succ _ => false
                end
            | Succ a =>
                begin
                | Zero => false
                | Succ b => a == b
                end
    end

sig Monoid : algebra.monoid.Api
val Monoid =
    val struct
        val neutral = Zero
        val combine =
            | Zero => std.core.id
            | Succ a => b => Succ (combine a b)

        val Laws =
            val struct
                val ''a = neutral + a'' =
                    refl

                val ''a = a + neutral'' =
                    | Zero    => refl
                    | Succ a' => subst refl by (''a = a + neutral'' a')

                val ''(a + b) + c = a + (b + c)'' = a b c =>
                    a match
                    | Zero    => refl
                    | Succ a' => congruent Succ (''(a + b) + c = a + (b + c)'' a' b c)
            end
    end