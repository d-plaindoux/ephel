open std.option

sig [_] : type -> type (infix 500)
val [_] = A =>
    | []   : [A]
    | _::_ : A -> [A] -> [A] (infixl 500)

-- Example: 1::2::3::[] : [int]

sig Core :
    sig struct
        sig head : [A] -> A?
        sig tail : [A] -> [A]?  -- Note [A]? = _? ([_] A)
        sig size : [A] -> Int
    end
val Core =
    val struct
        val head =
            | []     => none
            | h :: _ => some a

        val tail =
            | []     => none
            | _ :: t => some t

        val size =
            let size : Int -> [A] -> Int = acc =>
                | []     => acc
                | _ :: l => size (acc + 1) l
            in
            size 0
    end

val Functor : data.Functor [_] =
    val struct
        val map = f =>
            | []     => []
            | h :: t => f h :: map f t

        -- Functor laws

        val ''map id = id'' =
            | []     => refl
            | h :: t => admit -- reasoning t is missing here -> congruent

        val ''(map f) <| (map g) = map (f <| g)'' =
            | []     => refl
            | h :: t => admit -- reasoning t is missing here -> congruent
    end

