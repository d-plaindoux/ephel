-{ Prelude }-

open std.code
open std.bool

-{ Type definition }-

sig [_] : type -> type (infix 500)
val [_] = A =>
    | []   : [A]
    | _::_ : A -> [A] -> [A] (infixr 500)

-- Example: 1::2::3::[] : [int]

-{ Catamorphism }-

sig fold : {A R:type} -> [A] -> (unit -> R) -> (A -> [A] -> R) -> R
val fold =
    | []     => f => _ => f unit
    | a :: l => _ => f => f a l

-{ Basic functions }-

sig nonEmpty : [A] -> Bool
val nonEmpty =>
    | [] => false
    | _  => true

sig head : (l:[A]) -> {_: nonEmpty l :=: true} -> A
val head =
    | []     => . -- ex falso quolibet
    | h :: _ => a

sig tail : (l:[A]) -> {_: nonEmpty l :=: true} -> [A]
val tail =
    | []     => . -- ex falso quolibet
    | _ :: t => t

sig size : [A] -> Int
val size =
    let size : Int -> [A] -> Int = acc =>
        | []     => acc
        | _ :: l => size (acc + 1) l
    in
    size 0

-{ Functor, Applicative and Monad }-

val Functor : category.functor.Api [_] =
    val struct
        val map = f =>
            | []     => []
            | h :: t => f h :: map f t

        val Laws =
            val struct
                val ''map id = id'' =
                    | []     => refl
                    | h :: t => congruent (h ::_) (''map id = id'' t)

                val ''map f <| map g = map (f <| g)'' =
                    | []     => refl
                    | h :: t => congruent ((f <| g) h ::_) (''map f <| map g = map (f <| g)'' t)
            end
    end
