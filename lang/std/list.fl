-{ Type definition }-

sig [_] : type -> type (infix 500)
val [_] = A =>
    | []   : [A]
    | _::_ : A -> [A] -> [A] (infixr 500)

-- Example: 1::2::3::[] : [int]

-{ Basic functions }-

sig Core :
    let open std.option in
    sig struct
        sig head : [A] -> A?
        sig tail : [A] -> [A]?  -- Note [A]? = _? ([_] A)
        sig size : [A] -> Int
    end
val Core =
    let open std.option in
    val struct
        val head =
            | []     => none
            | h :: _ => some a

        val tail =
            | []     => none
            | _ :: t => some t

        val size =
            let size : Int -> [A] -> Int = acc =>
                | []     => acc
                | _ :: l => size (acc + 1) l
            in
            size 0
    end

-{ Functor, Applicative and Monad }-

val Functor : category.functor.Api [_] =
    val struct
        val map = f =>
            | []     => []
            | h :: t => f h :: map f t

        val Laws =
            val struct
                val ''map id = id'' =
                    | []     => refl
                    | h :: t => congruent (h ::_) (''map id = id'' t)

                val ''map f <| map g = map (f <| g)'' =
                    | []     => refl
                    | h :: t => congruent ((f <| g) h ::_) (''map f <| map g = map (f <| g)'' t)
            end
    end
