-{ Type definition }-

-- AKA Either
sig _Or_ : type -> type -> type (infixl 200)
val _Or_ = E A =>
    | Inl : E -> E Or A
    | Inr : A -> E Or A

-{ Constructors }-

val inl : {E A:type} -> E -> E Or A = Inl
val inr : {E A:type} -> A -> E Or A = Inr

-{ Catamorphism }-

sig fold : {E A R:type} -> E Or A -> (E -> R) -> (A -> R) -> A
val fold =
    | Inl e => l => _ => l e
    | Inr a => _ => r => r a

-{ Functor, Applicative and Monad }-

sig Functor : (E: type) -> category.functor.Api (E Or_)
val Functor = val struct
    val map = f =>
        | Inl e => Inl e
        | Inr a => Inr $ f a

    val Laws-Functor = val struct
        val ''map id = id'' =
            | Inl _ => refl
            | Inr _ => refl

        val ''(map f) <| (map g) = map (f <| g)'' =
            | Inl _ => refl
            | Inr _ => refl
    end
end

sig Applicative : (E: type) -> category.applicative.Api (E Or_)
val Applicative = val struct
    open Functor

    val pure = inl
    val product =
        let open dsl.begin-end in
        | Inl l => _ => Inl l
        | Inr f =>
            begin
            | Inl l => Inl l
            | Inr a => Inr (f,a)
            end

   val Laws-Applicative = val struct end
end

sig Monad : (E: type) -> category.monad.Api (E Or_)
val Monad = val struct
    open Applicative

    val join =
        | Inl l => Inl l
        | Inr a => a

    val Laws-Monad = val struct end
end
